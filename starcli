#!/bin/bash

if [ ${STARCLI_TRACE:=0} -eq 1 ]
then
  set -x
else
  set +x
fi

if [ ${STARCLI_DEBUG:=0} -ge 1 ]
then
  CMD_STDOUT="/proc/self/fd/1"
else
  CMD_STDOUT="/dev/null"
fi

AVAILABLE_ENVIRONMENT=()
AVAILABLE_ENVIRONMENT+=("STARCLI_DEBUG")
AVAILABLE_ENVIRONMENT+=("STARCLI_TRACE")

for I in $(seq 0 $(( ${#AVAILABLE_ENVIRONMENT[@]} - 1 )))
do
  ENV_VAL="${AVAILABLE_ENVIRONMENT[$I]}=$(eval echo \${${AVAILABLE_ENVIRONMENT[$I]}})"
  EXP_CMDLINE_FOR_SSH="$EXP_CMDLINE_FOR_SSH export $ENV_VAL;"
done

if [ $UID -ne 0 ]
then
  exec sudo $0 "$@"
fi

CLI_VERSION="0.9"

STAR_DIR="/etc/star"
ARRAY_NAME=$(cat $STAR_DIR/starname)
ARRAY_VERSION=$(cat $STAR_DIR/version)
test -f /etc/star/config && . /etc/star/config

AVAILABLE_COMMAND=()
AVAILABLE_COMMAND+=("starcli")
AVAILABLE_COMMAND+=("starclienv")
AVAILABLE_COMMAND+=("starlistlun")
AVAILABLE_COMMAND+=("starshowlun lun_or_snap_name1[,lun_or_snap_name2 ...]")
AVAILABLE_COMMAND+=("starcreatelun lun_name lun_size")
AVAILABLE_COMMAND+=("stardeletelun lun_name [-nop]   # Specify '-nop', does not ask yes/no.")
AVAILABLE_COMMAND+=("starlisthost")
AVAILABLE_COMMAND+=("starcreatehost host_name host_iqn [lun_or_snap_name1,lun_or_snap_name2 ...]")
AVAILABLE_COMMAND+=("stardeletehost host_name [-nop]")
AVAILABLE_COMMAND+=("starattachlun host_name lun_or_snap_name1[,lun_or_snap_name2 ...]")
AVAILABLE_COMMAND+=("stardetachlun host_name lun_or_snap_name1[,lun_or_snap_name2 ...] [-nop]")
AVAILABLE_COMMAND+=("starlistsnap")
AVAILABLE_COMMAND+=("starcreatesnap snap_name src_lun_name snap_alloc_size")
AVAILABLE_COMMAND+=("starrecreatesnap snap_name [-nop]")
AVAILABLE_COMMAND+=("starextendsnap snap_name snap_alloc_size [-nop]")
AVAILABLE_COMMAND+=("starrestoresnap snap_name [-nop]")
AVAILABLE_COMMAND+=("stardeletesnap snap_name [-nop]")
AVAILABLE_COMMAND+=("staractivatelun lun_or_snap_name1[,lun_or_snap_name2 ...]")
AVAILABLE_COMMAND+=("stardeactivatelun lun_or_snap_name1[,lun_or_snap_name2 ...] [-nop]")
AVAILABLE_COMMAND+=("starshowpool")
AVAILABLE_COMMAND+=("stargazing                      # Run 'pcs status' command.")
AVAILABLE_COMMAND+=("shootingstar [-nop]             # Run 'pcs resource move' command.")
AVAILABLE_COMMAND+=("starupdatetarget [-withclear]   # Update iSCSI target according to definitions.")
AVAILABLE_COMMAND+=("stargetactive                   # Return active controller name.")
AVAILABLE_COMMAND+=("starshowconfig")
AVAILABLE_COMMAND+=("starsetconfig variable1=value1[,variable2=value2 ...] [-nop]")
AVAILABLE_COMMAND+=("galaxyrebootnode [-nop]")
AVAILABLE_COMMAND+=("galaxyshutdownnode [-nop]")
AVAILABLE_COMMAND+=("galaxyshutdownarray [-nop]")
AVAILABLE_COMMAND+=("bigbang -force [-nop]   # Delete all hosts and luns. DO NOT USE unless necessary.")

POOL_NAME=${POOL_NAME:-STARpool}

NODE_NAME=$(uname -n)
NODE_BASENAME=${NODE_NAME/%?/}
NODE_NUM=${NODE_NAME: -1}
PARTNER_NODE="${NODE_BASENAME}$(( 3 - $NODE_NUM ))"

version() { echo "$@" | awk -F. '{ printf("%03d%03d%03d\n",$1,$2,$3); }' ; }

is_active_node()
{
  if [ -v IS_AVTIVE_NODE_RET ]
  then
    :
  else
    pcs resource status STARpool | egrep -q "Started +$(uname -n)"
    IS_AVTIVE_NODE_RET=$?
  fi
  return $IS_AVTIVE_NODE_RET
}

check_active_node()
{
  is_active_node && return 0

  echo "This command must be run on active controller."
  exit 1
}

check_all_nodes_online()
{
  pcs status nodes | grep 'Online:' | grep $NODE_NAME | grep -q $PARTNER_NODE \
      && return 0

  echo "There are offline nodes."
  exit 1
}

confirm_execution()
{
  MSG=$1
  NOP=$2

  if [ "x-nop" = "x$NOP" ]
  then
    :
  else
    echo -n "$MSG [y/N]:"
    read YN

    case $YN in
      [yY]*)
        :
        ;;
      *)
        echo 'Operation canceled.'
        exit 1
        ;;
    esac
  fi
}

targetcli_ls()
{
  CACHE=0

  if [ x"$1" == x"-c" ]
  then
    CACHE=1
    shift
  fi

  CACHE_FILE="$WORKDIR/$(echo $* | sed 's|/|%|g' | sed 's/ /_/g')"

  if [ $CACHE -eq 1 ]
  then
    test -f $CACHE_FILE && { cat $CACHE_FILE ; return ; }
  fi

  targetcli ls $@ | tee $CACHE_FILE
}

starcli()
{
  echo
  echo "starcli version $CLI_VERSION"
  echo
  echo 'Available Commands:'

  (
    cd /usr/bin
    for I in $(seq 0 $(( ${#AVAILABLE_COMMAND[@]} - 1 )))
    do
      LINK_NAME=${AVAILABLE_COMMAND[$I]%% *}
      if [ "$LINK_NAME" != "starcli" ]
      then
        test -L $LINK_NAME || ln -s starcli $LINK_NAME
      fi

      echo "  ${AVAILABLE_COMMAND[$I]}"
    done
  )
  echo
}

starclienv()
{
  echo
  echo 'Available Environments:'

  for I in $(seq 0 $(( ${#AVAILABLE_ENVIRONMENT[@]} - 1 )))
  do
    ENV_VAL="${AVAILABLE_ENVIRONMENT[$I]}=$(eval echo \${${AVAILABLE_ENVIRONMENT[$I]}})"
    echo "  ${ENV_VAL}"
  done
  echo
}

starcreatelun()
{
  LUN_NAME=$1
  LUN_SIZE=$2

  check_active_node
  check_all_nodes_online

  grep -qw "$LUN_NAME" $STAR_DIR/lunlist \
      && { echo "$LUN_NAME already exists." ; exit 1 ; }

  echo "$LUN_NAME" | grep -qE '^LUN[0-9]+$' \
      || { echo "lun_name must be match pettern '^LUN[0-9]+'." ; exit 1 ; }
  
  echo "$LUN_SIZE" | grep -qE '^[0-9]+M$' \
      || { echo "lun_size must be in megabytes, like '1024M'." ; exit 1 ; }

  LUN_WWN=$(uuidgen)

  lvcreate -n $LUN_NAME -L $LUN_SIZE $POOL_NAME \
      || { echo "Failed to create ${LUN_NAME}." ; exit 1 ; }

  echo "$LUN_NAME $LUN_WWN $LUN_SIZE" >> $STAR_DIR/lunlist

  scp $STAR_DIR/lunlist ${PARTNER_NODE}:${STAR_DIR}

  echo "$LUN_NAME $LUN_WWN $LUN_SIZE"
}

stardeletelun()
{
  LUN_NAME=$1
  NOP=$2

  check_active_node
  check_all_nodes_online

  grep -qw "$LUN_NAME" $STAR_DIR/lunlist \
      || { echo "$LUN_NAME does not exist." ; exit 1 ; }

  grep -qw "$LUN_NAME" $STAR_DIR/hostlist \
      && { echo "Cannot delete $LUN_NAME, the lun belongs to hosts." ; exit 1 ; }

  grep -qw "$LUN_NAME" $STAR_DIR/luneclipse 2>/dev/null \
      && { echo "Cannot delete $LUN_NAME, the lun is deactivated." ; exit 1 ; }

  NUM_LVS=$(lvs --noheadings | wc -l)
  if [ $NUM_LVS -eq 1 ]
  then
    echo "Cannot delete $LUN_NAME, there must be at least 1 existing LV."
    exit 1
  fi

  confirm_execution "Delete lun ${LUN_NAME}?" $NOP

  lvremove -y /dev/$POOL_NAME/$LUN_NAME \
      || { echo "Failed to delete ${LUN_NAME}." ; exit 1 ; }

  grep -vw "$LUN_NAME" $STAR_DIR/lunlist > $STAR_DIR/lunlist.$$
  mv $STAR_DIR/lunlist.$$ $STAR_DIR/lunlist

  scp $STAR_DIR/lunlist ${PARTNER_NODE}:${STAR_DIR}

  echo "$LUN_NAME deleted."
}

starupdatetarget()
{
  WITHCLEAR=$1

  WORKDIR=$(mktemp -d --tmpdir ${COMMAND_NAME}.XXXXXX)

  echo "Updating iSCSI target configs on $NODE_NAME, takes a while."

  ##
  ## executes targetcli clear config before updating
  ##
  [ "x-withclear" = "x$WITHCLEAR" ] && targetcli clearconfig confirm=True

  ##
  ## create temp lunlist
  ##
  if [ $(version "$ARRAY_VERSION") -ge $(version "0.3") ]
  then
    is_active_node && echo HD140283 54686520-6f6c-6465-7374-20737461722e > $WORKDIR/lunlist
  fi
  if [ -f $STAR_DIR/luneclipse ]
  then
    grep '^LUN' $STAR_DIR/luneclipse > $WORKDIR/luneclipse.LUN
    grep '^SNAP' $STAR_DIR/luneclipse > $WORKDIR/luneclipse.SNAP
    grep -vw -f $WORKDIR/luneclipse.LUN $STAR_DIR/lunlist >> $WORKDIR/lunlist
    grep -vw -f $WORKDIR/luneclipse.SNAP $STAR_DIR/snaplist 2>/dev/null \
        | awk '{ print $1,$3 }' >> $WORKDIR/lunlist
  else
    cat $STAR_DIR/lunlist >> $WORKDIR/lunlist
    cat $STAR_DIR/snaplist 2>/dev/null >> $WORKDIR/lunlist
  fi

  ##
  ## add objects
  ##
  SEND_TGT=0
  OLD_IFS=$IFS
  IFS=$'\n'
  for LUN_INFO in $(cat $WORKDIR/lunlist)
  do
    LUN_NAME=$(echo $LUN_INFO | awk '{ print $1 }')
    LUN_WWN=$(echo $LUN_INFO | awk '{ print $2 }')

    [ "$LUN_NAME" = "HD140283" ] || { grep -qw $LUN_NAME $STAR_DIR/hostlist || continue ; }

    targetcli_ls -c /backstores/block 1 | grep -wq STAR-${LUN_NAME} && continue

    if is_active_node
    then
      DEV="/dev/$POOL_NAME/$LUN_NAME"
    else
      DEV="/dev/disk/by-id/scsi-36001405$(echo ${LUN_WWN//-/} | cut -c 1-25)"
         # 001405 is IEEE Company ID of OpenFablics.

      if [ $SEND_TGT -eq 0 ]
      then
        iscsiadm -m discovery -t sendtargets -p $PARTNER_NODE >$CMD_STDOUT
        iscsiadm -m node --login
        SEND_TGT=1
      fi

      for ISCSI_HOST in $(ls -1 /sys/class/iscsi_host)
      do
        echo '- - -' > /sys/class/scsi_host/$ISCSI_HOST/scan
      done

      for I in $(seq 1 5)
      do
        test -L ${DEV} || {
            sleep 1 ; echo "Waiting for the device to appear. [$I]" >&2 ; continue ; }
	break
      done
    fi

    test -L ${DEV} && {
        echo cd /backstores/block
        echo create name=STAR-${LUN_NAME} dev=${DEV} wwn=${LUN_WWN} ; } \
           >> $WORKDIR/create_bs_lun_cmds
  done

  [ -s $WORKDIR/create_bs_lun_cmds ] && {
      cat $WORKDIR/create_bs_lun_cmds | targetcli >$CMD_STDOUT ; }

  if [ $(version "$ARRAY_VERSION") -ge $(version "0.4") ]
  then 
    targetcli_ls /backstores/block 1 > /dev/null 2>&1
    for LUN_INFO in $(cat $WORKDIR/lunlist)
    do
      LUN_NAME=$(echo $LUN_INFO | awk '{ print $1 }')

      targetcli_ls -c /backstores/block 1 | grep -wq STAR-${LUN_NAME} || continue

      targetcli ls /backstores/block/STAR-${LUN_NAME}/alua \
          | grep -q 'node._tg_pt_gp' || { echo cd /backstores/block/STAR-${LUN_NAME}/alua
              echo create node${NODE_NUM}_tg_pt_gp ${NODE_NUM}
            if ! is_active_node
            then
              echo cd /backstores/block/STAR-${LUN_NAME}/alua/node${NODE_NUM}_tg_pt_gp
              echo set alua alua_access_type=1 alua_access_state=${STANDBY_NON_OPTIMIZED:-0}
            fi ; }
    done > $WORKDIR/create_tgt_port_grp_cmds
  fi
  IFS=$OLD_IFS

  [ -s $WORKDIR/create_tgt_port_grp_cmds ] && {
      cat $WORKDIR/create_tgt_port_grp_cmds | targetcli >$CMD_STDOUT ; }

  ARRAY_TGT_IQN="iqn.2023-09.test.use.only:${ARRAY_NAME}-target"

  targetcli ls /iscsi/$ARRAY_TGT_IQN > /dev/null 2>&1 \
      || targetcli /iscsi create $ARRAY_TGT_IQN >$CMD_STDOUT

  ARRAY_INIT_IQN="iqn.2023-09.test.use.only:${ARRAY_NAME}-initiator"

  if is_active_node
  then
    targetcli ls /iscsi/$ARRAY_TGT_IQN/tpg1/acls/$ARRAY_INIT_IQN > /dev/null 2>&1 \
        || targetcli /iscsi/$ARRAY_TGT_IQN/tpg1/acls create $ARRAY_INIT_IQN >$CMD_STDOUT
  fi

  OLD_IFS=$IFS
  IFS=$'\n'
  for LUN_INFO in $(cat $WORKDIR/lunlist)
  do
    LUN_NAME=$(echo $LUN_INFO | awk '{ print $1 }')

    [ "$LUN_NAME" = "HD140283" ] || { grep -qw $LUN_NAME $STAR_DIR/hostlist || continue ; }

    targetcli_ls -c /iscsi/$ARRAY_TGT_IQN/tpg1/luns | grep -qw $LUN_NAME && continue

    if [ "$LUN_NAME" = "HD140283" ]
    then
      I=128
    else
      for I in $(seq 0 127)
      do
        targetcli_ls -c /iscsi/$ARRAY_TGT_IQN/tpg1/luns | grep -wq lun${I} || break
      done
    fi

    targetcli /iscsi/$ARRAY_TGT_IQN/tpg1/luns create /backstores/block/STAR-${LUN_NAME} $I false \
        >$CMD_STDOUT
    targetcli_ls /iscsi/$ARRAY_TGT_IQN/tpg1/luns > /dev/null 2>&1

    if is_active_node
    then
      { echo cd /iscsi/$ARRAY_TGT_IQN/tpg1/acls/$ARRAY_INIT_IQN
        echo create $I /backstores/block/STAR-${LUN_NAME} ; } >> $WORKDIR/create_map_lun_array_cmds
    fi
  done

  [ -s $WORKDIR/create_map_lun_array_cmds ] && {
      cat $WORKDIR/create_map_lun_array_cmds | targetcli >$CMD_STDOUT ; }

  if [ $(version "$ARRAY_VERSION") -ge $(version "0.4") ]
  then
    for LUN_INFO in $(cat $WORKDIR/lunlist)
    do
      LUN_NAME=$(echo $LUN_INFO | awk '{ print $1 }')
      targetcli_ls -c /iscsi/$ARRAY_TGT_IQN/tpg1/luns | grep -wq STAR-${LUN_NAME} || continue
      targetcli_ls -c /iscsi/$ARRAY_TGT_IQN/tpg1/luns | grep -w STAR-${LUN_NAME} \
          | grep -q 'node._tg_pt_gp' || {
            lunN=$(targetcli_ls -c /iscsi/$ARRAY_TGT_IQN/tpg1/luns \
                | awk "/STAR-${LUN_NAME}/{ print \$2 }")
            echo cd /iscsi/$ARRAY_TGT_IQN/tpg1/luns/$lunN
            echo set alua alua_tg_pt_gp_name=node${NODE_NUM}_tg_pt_gp ; }
    done > $WORKDIR/set_alua_tgt_port_grp_cmds
  fi

  [ -s $WORKDIR/set_alua_tgt_port_grp_cmds ] && {
      cat $WORKDIR/set_alua_tgt_port_grp_cmds | targetcli >$CMD_STDOUT ; }

  for HOST_INFO in $(cat $STAR_DIR/hostlist)
  do
    HOST_IQN=$(echo $HOST_INFO | awk '{ print $2 }')
    HOST_LUNS=$(echo $HOST_INFO | awk '{ print $3 }')

    targetcli_ls -c /iscsi/$ARRAY_TGT_IQN/tpg1/acls | grep -qw $HOST_IQN \
        || targetcli /iscsi/$ARRAY_TGT_IQN/tpg1/acls create $HOST_IQN false \
	    >$CMD_STDOUT

    for LUN_NAME in $(echo $HOST_LUNS | sed 's/,/\n/g')
    do
      grep -qw $LUN_NAME $WORKDIR/lunlist || continue
      targetcli_ls -c /iscsi/$ARRAY_TGT_IQN/tpg1/acls/$HOST_IQN | grep -qw $LUN_NAME \
          && continue

      for I in $(seq 0 127)
      do
        targetcli_ls -c /iscsi/$ARRAY_TGT_IQN/tpg1/acls/$HOST_IQN | grep -qw mapped_lun${I} \
            || break
      done

      targetcli /iscsi/$ARRAY_TGT_IQN/tpg1/acls/$HOST_IQN create $I \
          /backstores/block/STAR-${LUN_NAME} >$CMD_STDOUT

      targetcli_ls /iscsi/$ARRAY_TGT_IQN/tpg1/acls/$HOST_IQN > /dev/null 2>&1
    done
  done
  IFS=$OLD_IFS

  ##
  ## remove objects
  ##
  for HOST_IQN in \
      $(targetcli_ls -c /iscsi/$ARRAY_TGT_IQN/tpg1/acls 1 | grep -v -e acls -e $ARRAY_INIT_IQN \
          | awk '{ print $2 }')
  do
    grep -q "[[:blank:]]${HOST_IQN}[[:blank:]]" $STAR_DIR/hostlist \
        || { targetcli /iscsi/$ARRAY_TGT_IQN/tpg1/acls delete $HOST_IQN >$CMD_STDOUT ; continue ; }

    for LUN_NAME in $(targetcli_ls -c /iscsi/$ARRAY_TGT_IQN/tpg1/acls/$HOST_IQN \
        | grep mapped_lun | awk -F- '{ print $3 }' | awk '{ print $1 }')
    do
      INDEX=$(targetcli_ls -c /iscsi/$ARRAY_TGT_IQN/tpg1/acls/$HOST_IQN \
          | grep $LUN_NAME | awk '{ print $2 }' | sed 's/mapped_lun//g')

      grep "[[:blank:]]${HOST_IQN}[[:blank:]]" $STAR_DIR/hostlist | grep -qw $LUN_NAME \
          || targetcli /iscsi/$ARRAY_TGT_IQN/tpg1/acls/$HOST_IQN delete $INDEX >$CMD_STDOUT
    done
  done

  for LUN_NAME in $(targetcli ls /backstores/block | grep STAR- | grep -v HD140283 \
      | awk '{ print $2 }' | awk -F- '{ print $2 }')
  do
    if [ -f $STAR_DIR/luneclipse ] && grep -wq $LUN_NAME $STAR_DIR/luneclipse
    then
      echo cd /backstores/block
      echo delete STAR-$LUN_NAME
    elif grep -wq $LUN_NAME $STAR_DIR/hostlist
    then
      :
    else
      echo cd /backstores/block
      echo delete STAR-$LUN_NAME
    fi
  done > $WORKDIR/delete_bs_lun_cmds

  [ -s $WORKDIR/delete_bs_lun_cmds ] && {
      cat $WORKDIR/delete_bs_lun_cmds | targetcli >$CMD_STDOUT ; }

  if ! is_active_node
  then
    for LUN_NAME in $(cat $WORKDIR/delete_bs_lun_cmds | awk '/STAR-/{ print $2 }')
    do
      LUN_WWN=$(grep -w ${LUN_NAME/STAR-/} $WORKDIR/lunlist | awk '{ print $2 }')
      DEV="/dev/disk/by-id/scsi-36001405$(echo ${LUN_WWN//-/} | cut -c 1-25)"

      test -L ${DEV} || continue

      echo 1 > /sys/block/$(basename $(readlink $DEV))/device/delete

      for I in $(seq 1 5)
      do
        ls -1d ${DEV} 2> /dev/null && {
            sleep 1 ; echo "Waiting for the device to disappear. [$I]" >&2 ;
                continue ; }
        break
      done
    done
  fi

  ##
  ## save and send config to partner node
  ##
  targetcli saveconfig

  RUNNING_CONFIG="/etc/target/saveconfig.json"

  if is_active_node
  then
    STARTUP_CONFIG="${RUNNING_CONFIG}.active"
  else
    STARTUP_CONFIG="${RUNNING_CONFIG}.standby"
  fi

  cp -p $RUNNING_CONFIG $STARTUP_CONFIG

  scp $STARTUP_CONFIG ${PARTNER_NODE}:/etc/target

  rm -rf $WORKDIR
}

starcreatehost()
{
  HOST_NAME=$1
  HOST_IQN=$2
  HOST_LUNS=$3

  check_active_node
  check_all_nodes_online

  grep -qw "^$HOST_NAME" $STAR_DIR/hostlist \
      && { echo "$HOST_NAME already exists." ; exit 1 ; }  

  grep -qw "$HOST_IQN" $STAR_DIR/hostlist \
      && { echo "$HOST_IQN already exists." ; exit 1 ; }  

  for LUN_NAME in $(echo $HOST_LUNS | sed 's/,/\n/g')
  do
    grep -qw "^$LUN_NAME" $STAR_DIR/{lunlist,snaplist} 2>/dev/null \
        || { echo "$LUN_NAME does not exist." ; exit 1 ; }
  done

  echo "$HOST_NAME $HOST_IQN $HOST_LUNS" >> $STAR_DIR/hostlist

  starupdatetarget

  scp $STAR_DIR/hostlist ${PARTNER_NODE}:$STAR_DIR
  ssh -n -o ConnectTimeout=10 $PARTNER_NODE \
      "$EXP_CMDLINE_FOR_SSH /usr/bin/starupdatetarget"

  echo "$HOST_NAME created."  
}

stardeletehost()
{
  HOST_NAME=$1
  NOP=$2

  check_active_node
  check_all_nodes_online

  grep -qw "^$HOST_NAME" $STAR_DIR/hostlist \
      || { echo "$HOST_NAME does not exist." ; exit 1 ; }

  confirm_execution "Delete host ${HOST_NAME}?" $NOP

  grep -vw "^$HOST_NAME" $STAR_DIR/hostlist > $STAR_DIR/hostlist.$$
  mv $STAR_DIR/hostlist.$$ $STAR_DIR/hostlist

  starupdatetarget

  scp $STAR_DIR/hostlist ${PARTNER_NODE}:${STAR_DIR}
  ssh -n -o ConnectTimeout=10 $PARTNER_NODE \
      "$EXP_CMDLINE_FOR_SSH /usr/bin/starupdatetarget"

  echo "$HOST_NAME deleted."
}

starattachlun()
{
  HOST_NAME=$1
  ATTACH_LUNS=$2

  check_active_node
  check_all_nodes_online

  grep -qw "^$HOST_NAME" $STAR_DIR/hostlist \
      || { echo "$HOST_NAME does not exist." ; exit 1 ; }

  for LUN_NAME in $(echo $ATTACH_LUNS | sed 's/,/\n/g')
  do
    grep -qw "^$LUN_NAME" $STAR_DIR/{lunlist,snaplist} 2>/dev/null \
        || { echo "$LUN_NAME does not exist." ; exit 1 ; }
    grep -qw "$LUN_NAME" $STAR_DIR/luneclipse 2>/dev/null \
        && { echo "$LUN_NAME is deactivated." ; exit 1 ; }
    grep -w "^$HOST_NAME" $STAR_DIR/hostlist | grep -qw $LUN_NAME \
        && { echo "$LUN_NAME already belongs to ${HOST_NAME}." ; exit 1 ; }
  done

  HOST_INFO=$(grep -w ^$HOST_NAME $STAR_DIR/hostlist)
  HOST_IQN=$(echo $HOST_INFO | awk '{ print $2 }')
  HOST_LUNS=$(echo $HOST_INFO | awk '{ print $3 }')

  if [ -z "$HOST_LUNS" ]
  then
    HOST_LUNS="$ATTACH_LUNS"
  else
    HOST_LUNS=$(echo "${HOST_LUNS},${ATTACH_LUNS}" \
        | sed 's/,/\n/g' | sort | tr '\n' ',' | sed 's/,$/\n/g')
  fi

  cat $STAR_DIR/hostlist \
      | sed 's/'"${HOST_NAME}"' .*/'"${HOST_NAME} ${HOST_IQN} ${HOST_LUNS}"'/g' \
          > $STAR_DIR/hostlist.$$
  mv $STAR_DIR/hostlist.$$ $STAR_DIR/hostlist

  starupdatetarget

  scp $STAR_DIR/hostlist ${PARTNER_NODE}:${STAR_DIR}
  ssh -n -o ConnectTimeout=10 $PARTNER_NODE \
      "$EXP_CMDLINE_FOR_SSH /usr/bin/starupdatetarget"

  echo "${ATTACH_LUNS} atached to ${HOST_NAME}." 
}

stardetachlun()
{
  HOST_NAME=$1
  DETACH_LUNS=$2
  NOP=$3

  check_active_node
  check_all_nodes_online

  grep -qw "^$HOST_NAME" $STAR_DIR/hostlist \
      || { echo "$HOST_NAME does not exist." ; exit 1 ; }

  for LUN_NAME in $(echo $DETACH_LUNS | sed 's/,/\n/g')
  do
    grep -w "^$HOST_NAME" $STAR_DIR/hostlist | grep -qw $LUN_NAME \
        || { echo "$LUN_NAME does not belong to ${HOST_NAME}." ; exit 1 ; }
  done

  confirm_execution "Detach ${DETACH_LUNS} from ${HOST_NAME}?" $NOP

  HOST_INFO=$(grep -w ^$HOST_NAME $STAR_DIR/hostlist)
  HOST_IQN=$(echo $HOST_INFO | awk '{ print $2 }')
  HOST_LUNS=$(echo $HOST_INFO | awk '{ print $3 }')

  for LUN_NAME in $(echo $DETACH_LUNS | sed 's/,/\n/g')
  do
    HOST_LUNS=$(echo "${HOST_LUNS}" | sed 's/,/\n/g' | grep -vw $LUN_NAME \
        | sort | tr '\n' ',' | sed 's/,$/\n/g')
  done

  cat $STAR_DIR/hostlist \
      | sed 's/'"${HOST_NAME}"' .*/'"${HOST_NAME} ${HOST_IQN} ${HOST_LUNS}"'/g' \
          > $STAR_DIR/hostlist.$$
  mv $STAR_DIR/hostlist.$$ $STAR_DIR/hostlist

  starupdatetarget

  scp $STAR_DIR/hostlist ${PARTNER_NODE}:${STAR_DIR}
  ssh -n -o ConnectTimeout=10 $PARTNER_NODE \
      "$EXP_CMDLINE_FOR_SSH /usr/bin/starupdatetarget"

  echo "$DETACH_LUNS detached from ${HOST_NAME}."
}

staractivatelun()
{
  ACTIVATE_LUNS=$1

  check_active_node
  check_all_nodes_online

  for LUN_NAME in $(echo $ACTIVATE_LUNS | sed 's/,/\n/g')
  do
    grep -qw "$LUN_NAME" $STAR_DIR/luneclipse 2>/dev/null \
        || { echo "$LUN_NAME is not deactivated." ; exit 1 ; }
  done

  echo "Luns or snaps will be accessible from Hosts (internally reattach)."

  for LUN_NAME in $(echo $ACTIVATE_LUNS | sed 's/,/\n/g')
  do
    grep -wv $LUN_NAME $STAR_DIR/luneclipse > $STAR_DIR/luneclipse.$$
    mv $STAR_DIR/luneclipse.$$ $STAR_DIR/luneclipse
  done

  starupdatetarget

  scp $STAR_DIR/luneclipse ${PARTNER_NODE}:${STAR_DIR}
  ssh -n -o ConnectTimeout=10 $PARTNER_NODE \
      "$EXP_CMDLINE_FOR_SSH /usr/bin/starupdatetarget"

  echo "$ACTIVATE_LUNS are activated."
}

stardeactivatelun()
{
  DEACTIVATE_LUNS=$1
  NOP=$2

  check_active_node
  check_all_nodes_online

  for LUN_NAME in $(echo $DEACTIVATE_LUNS | sed 's/,/\n/g')
  do
    grep -qw "^$LUN_NAME" $STAR_DIR/{lunlist,snaplist} 2>/dev/null \
        || { echo "$LUN_NAME does not exist." ; exit 1 ; }
    grep -qw "$LUN_NAME" $STAR_DIR/luneclipse 2>/dev/null \
        && { echo "$LUN_NAME is already deactivated." ; exit 1 ; }

    echo "$LUN_NAME belongs to hosts below."
    grep -w "$LUN_NAME" $STAR_DIR/hostlist | awk '{ print "  " $1 }'
  done

  echo
  echo "Luns or snaps will be inaccessible from Hosts (internally detach)."
  echo "Deactivated luns or snaps cannot attach to hosts."
  confirm_execution "Deactivate ${DEACTIVATE_LUNS}?" $NOP

  for LUN_NAME in $(echo $DEACTIVATE_LUNS | sed 's/,/\n/g')
  do
    echo $LUN_NAME
  done >> $STAR_DIR/luneclipse

  starupdatetarget

  scp $STAR_DIR/luneclipse ${PARTNER_NODE}:${STAR_DIR}
  ssh -n -o ConnectTimeout=10 $PARTNER_NODE \
      "$EXP_CMDLINE_FOR_SSH /usr/bin/starupdatetarget"

  echo "$DEACTIVATE_LUNS are deactivated."
}

starcreatesnap()
{
  SNAP_NAME=$1
  SOURCE_LUN_NAME=$2
  SNAP_ALLOC_SIZE=$3

  check_active_node
  check_all_nodes_online

  grep -qw "$SOURCE_LUN_NAME" $STAR_DIR/lunlist \
      || { echo "Source lun $SOURCE_LUN_NAME does not exist." ; exit 1 ; }

  grep -qw "$SNAP_NAME" $STAR_DIR/snaplist 2>/dev/null \
      && { echo "$SNAP_NAME already exists." ; exit 1 ; }

  echo "$SNAP_NAME" | grep -qE '^SNAP[0-9]+$' \
      || { echo "snap_name must be match pettern '^SNAP[0-9]+'." ; exit 1 ; }

  echo "$SNAP_ALLOC_SIZE" | grep -qE -e '^[0-9]+M$' -e '^[1-9][0-9]*%ORIGIN$' \
      || { echo "snap_alloc_size must be in megabytes, like '1024M'." ;
           echo "  or percentage(of source lun size)%ORIGIN format, like '10%ORIGIN'." ;
	   exit 1 ; }

  SNAP_WWN=$(uuidgen)

  if echo "$SNAP_ALLOC_SIZE" | grep -qE '^[0-9]+M$'
  then
    OPT="-L"
  else
    OPT="-l"
  fi

  lvcreate -n $SNAP_NAME $OPT $SNAP_ALLOC_SIZE -c ${SNAP_CHUNK_SIZE:-256} --snapshot \
      /dev/$POOL_NAME/$SOURCE_LUN_NAME \
          || { echo "Failed to create ${SNAP_NAME}." ; exit 1 ; }

  echo "$SNAP_NAME $SOURCE_LUN_NAME $SNAP_WWN $SNAP_ALLOC_SIZE" >> $STAR_DIR/snaplist
  
  scp $STAR_DIR/snaplist ${PARTNER_NODE}:${STAR_DIR}

  echo "$SNAP_NAME $SOURCE_LUN_NAME $SNAP_WWN $SNAP_ALLOC_SIZE"
}

starrecreatesnap()
{
  SNAP_NAME=$1
  NOP=$2

  check_active_node
  check_all_nodes_online

  grep -qw "$SNAP_NAME" $STAR_DIR/snaplist 2>/dev/null \
      || { echo "$SNAP_NAME does not exist." ; exit 1 ; }

  IS_DEACTIVATED=0
  grep -qw "$SNAP_NAME" $STAR_DIR/luneclipse 2>/dev/null && IS_DEACTIVATED=1

  confirm_execution "Recreate $SNAP_NAME?" $NOP

  if [ $IS_DEACTIVATED -eq 0 ]
  then
    stardeactivatelun $SNAP_NAME -nop
  fi

  SNAP_INFO=$(grep -w "^$SNAP_NAME" $STAR_DIR/snaplist)
  SOURCE_LUN_NAME=$(echo $SNAP_INFO | awk '{ print $2 }')
  SNAP_WWN=$(echo $SNAP_INFO | awk '{ print $3 }')
  SNAP_ALLOC_SIZE=$(echo $SNAP_INFO | awk '{ print $4 }')

  if echo "$SNAP_ALLOC_SIZE" | grep -qE '^[0-9]+M$'
  then
    OPT="-L"
  else
    OPT="-l"
  fi

  lvremove -y /dev/$POOL_NAME/$SNAP_NAME \
      || { echo "Failed to delete ${SNAP_NAME}." ; exit 1 ; }

  lvcreate -n $SNAP_NAME $OPT $SNAP_ALLOC_SIZE -c ${SNAP_CHUNK_SIZE:-256} --snapshot \
      /dev/$POOL_NAME/$SOURCE_LUN_NAME \
          || { echo "Failed to create ${SNAP_NAME}." ; exit 1 ; }

  if [ $IS_DEACTIVATED -eq 0 ]
  then
    staractivatelun $SNAP_NAME
  fi

  echo "$SNAP_NAME recreated."
}

starextendsnap()
{
  SNAP_NAME=$1
  NEW_SNAP_ALLOC_SIZE=$2
  NOP=$3

  check_active_node
  check_all_nodes_online

  grep -qw "$SNAP_NAME" $STAR_DIR/snaplist 2>/dev/null \
      || { echo "$SNAP_NAME does not exist." ; exit 1 ; }

  SNAP_INFO=$(grep -w "^$SNAP_NAME" $STAR_DIR/snaplist)
  SOURCE_LUN_NAME=$(echo $SNAP_INFO | awk '{ print $2 }')
  SNAP_WWN=$(echo $SNAP_INFO | awk '{ print $3 }')
  SNAP_ALLOC_SIZE=$(echo $SNAP_INFO | awk '{ print $4 }')

  confirm_execution \
      "Extend $SNAP_NAME size from $SNAP_ALLOC_SIZE to $NEW_SNAP_ALLOC_SIZE?" $NOP

  if echo "$SNAP_ALLOC_SIZE" | grep -qE '^[0-9]+M$'
  then
    OPT="-L"
  else
    OPT="-l"
  fi

  lvextend $OPT $NEW_SNAP_ALLOC_SIZE /dev/$POOL_NAME/$SNAP_NAME \
      || { echo "Failed to extend ${SNAP_NAME}." ; exit 1 ; }

  sed -i -E \
      's/^('"$SNAP_NAME"') +.+/\1 '"$SOURCE_LUN_NAME $SNAP_WWN $NEW_SNAP_ALLOC_SIZE"'/g' \
          $STAR_DIR/snaplist

  echo "$SNAP_NAME extended."
}

starrestoresnap()
{
  SNAP_NAME=$1
  NOP=$2

  check_active_node
  check_all_nodes_online

  grep -qw "$SNAP_NAME" $STAR_DIR/snaplist 2>/dev/null \
      || { echo "$SNAP_NAME does not exist." ; exit 1 ; }

  grep -qw "$SNAP_NAME" $STAR_DIR/hostlist \
      && { echo "Cannot restore $SNAP_NAME, the snap belongs to hosts." ; exit 1 ; }

  grep -qw "$SNAP_NAME" $STAR_DIR/luneclipse 2>/dev/null \
      && { echo "Cannot restore $SNAP_NAME, the snap is deactivated." ; exit 1 ; }

  SNAP_INFO=$(grep -w "^$SNAP_NAME" $STAR_DIR/snaplist)
  SOURCE_LUN_NAME=$(echo $SNAP_INFO | awk '{ print $2 }')

  grep -qw "$SOURCE_LUN_NAME" $STAR_DIR/luneclipse 2>/dev/null \
      || { echo "Cannot restore to $SOURCE_LUN_NAME, deactivate target lun first." ;
           exit 1 ; }

  confirm_execution "Restore $SNAP_NAME to ${SOURCE_LUN_NAME}?" $NOP

  lvchange -an /dev/$POOL_NAME/$SOURCE_LUN_NAME \
      || { echo "Failed to restore ${SNAP_NAME}. lvchange -an failed." ; exit 1 ; }

  lvconvert --merge /dev/$POOL_NAME/$SNAP_NAME \
      || { echo "Failed to restore ${SNAP_NAME}." ; exit 1 ; }

  lvchange -ay /dev/$POOL_NAME/$SOURCE_LUN_NAME \
      || { echo "Failed to restore ${SNAP_NAME}. lvchange -ay failed." ; exit 1 ; }

  grep -vw "$SNAP_NAME" $STAR_DIR/snaplist > $STAR_DIR/snaplist.$$
  mv $STAR_DIR/snaplist.$$ $STAR_DIR/snaplist

  scp $STAR_DIR/snaplist ${PARTNER_NODE}:${STAR_DIR}

  echo "$SNAP_NAME restored to $SOURCE_LUN_NAME."
}

stardeletesnap()
{
  SNAP_NAME=$1
  NOP=$2

  check_active_node
  check_all_nodes_online

  grep -qw "$SNAP_NAME" $STAR_DIR/snaplist 2>/dev/null \
      || { echo "$SNAP_NAME does not exist." ; exit 1 ; }

  grep -qw "$SNAP_NAME" $STAR_DIR/hostlist \
      && { echo "Cannot delete $SNAP_NAME, the snap belongs to hosts." ; exit 1 ; }

  grep -qw "$SNAP_NAME" $STAR_DIR/luneclipse 2>/dev/null \
      && { echo "Cannot delete $SNAP_NAME, the snap is deactivated." ; exit 1 ; }

  confirm_execution "Delete snap ${SNAP_NAME}?" $NOP

  lvremove -y /dev/$POOL_NAME/$SNAP_NAME \
      || { echo "Failed to delete ${SNAP_NAME}." ; exit 1 ; }

  grep -vw "$SNAP_NAME" $STAR_DIR/snaplist > $STAR_DIR/snaplist.$$
  mv $STAR_DIR/snaplist.$$ $STAR_DIR/snaplist

  scp $STAR_DIR/snaplist ${PARTNER_NODE}:${STAR_DIR}

  echo "$SNAP_NAME deleted."
}

stargetactive()
{
  if is_active_node
  then
    echo $NODE_NAME
  else
    echo $PARTNER_NODE
  fi
}

starsetconfig()
{
  VAR_VAL_LIST=$1
  NOP=$2

  check_active_node
  check_all_nodes_online

  confirm_execution "Set $VAR_VAL_LIST to config?" $NOP

  for VAR_VAL in $(echo $VAR_VAL_LIST | sed 's/,/\n/g')
  do
    VAR=${VAR_VAL%=*}
    grep -wq "$VAR" $STAR_DIR/config \
        || { echo "Invalid variable $VAR skipped." ; continue ; }
    echo "$VAR_VAL"
    sed -i "s/^${VAR}=.*/$VAR_VAL/g" $STAR_DIR/config
  done

  scp $STAR_DIR/config ${PARTNER_NODE}:${STAR_DIR}

  echo 'For apply in most cases, need to failover with `shootingstar` command.'
}

bigbang()
{
  FORCE=$1
  NOP=$2

  check_active_node
  check_all_nodes_online

  [ "x-force" = "x$FORCE" ] || { echo "MUST specify '-force'." ; exit 1 ; }
  confirm_execution "Delete all hosts and luns?" $NOP

  : > $STAR_DIR/hostlist
  starupdatetarget

  scp $STAR_DIR/hostlist ${PARTNER_NODE}:${STAR_DIR}
  ssh -n -o ConnectTimeout=10 $PARTNER_NODE \
      "$EXP_CMDLINE_FOR_SSH /usr/bin/starupdatetarget"

  lvremove -y /dev/$POOL_NAME/LUN*
  : > $STAR_DIR/lunlist
  scp $STAR_DIR/lunlist ${PARTNER_NODE}:${STAR_DIR}

  echo "Hosts and luns are deleted."
}

starlistlun()
{
  (
    IFS=$'\n'
    for LUN_INFO in $(cat $STAR_DIR/lunlist)
    do
      LUN_NAME="${LUN_INFO%% *}"
      DEACTIVATED=""
      grep -qw $LUN_NAME $STAR_DIR/luneclipse 2>/dev/null && DEACTIVATED="Diactivated"
      echo $LUN_INFO $DEACTIVATED
    done
  )
}

starlistsnap()
{
  (
    IFS=$'\n'
    for SNAP_INFO in $(cat $STAR_DIR/snaplist 2>/dev/null)
    do
      SNAP_NAME="${SNAP_INFO%% *}"
      DEACTIVATED=""
      grep -qw $SNAP_NAME $STAR_DIR/luneclipse 2>/dev/null && DEACTIVATED="Diactivated"
      echo $SNAP_INFO $DEACTIVATED
    done
  )
}

COMMAND_NAME=$(basename $0)

case $COMMAND_NAME in
  starlisthost)
    cat $STAR_DIR/hostlist
    ;;
  starshowlun)
    check_active_node
    lvdisplay \
        $(echo $1 | awk -F, '{ for(i=1;i<=NF;i++)printf("/dev/'$POOL_NAME'/%s ",$i) }')
    ;;
  starshowpool)
    check_active_node
    vgdisplay
    ;;
  shootingstar)
    check_active_node
    check_all_nodes_online
    confirm_execution "Execute shootingstar? (means node failover)" $1
    pcs resource move STARpool --autodelete
    ;;
  stargazing)
    pcs status
    ;;
  starshowconfig)
    cat $STAR_DIR/config
    ;;
  galaxyrebootnode)
    confirm_execution "Reboot node ${NODE_NAME}?" $1
    reboot
    ;;
  galaxyshutdownnode)
    confirm_execution "Shutdown node ${NODE_NAME}?" $1
    shutdown -h now
    ;;
  galaxyshutdownarray)
    check_active_node
    check_all_nodes_online
    confirm_execution "Shutdown array ${ARRAY_NAME}?" $1
    ssh -n -o ConnectTimeout=10 $PARTNER_NODE \
        "$EXP_CMDLINE_FOR_SSH /usr/bin/galaxyshutdownnode -nop"
    sleep 30
    galaxyshutdownnode -nop
    ;;
  *)
    $COMMAND_NAME "$@"
    ;;
esac
